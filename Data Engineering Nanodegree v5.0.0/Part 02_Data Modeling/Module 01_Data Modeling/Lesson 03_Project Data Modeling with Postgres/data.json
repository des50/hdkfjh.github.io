{
  "data": {
    "lesson": {
      "id": 826261,
      "key": "01995bb4-db30-4e01-bf38-ff11b631be0f",
      "title": "Project: Data Modeling with Postgres",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Students will model user activity data to create a database and ETL pipeline in Postgres for a music streaming app. They will define Fact and Dimension tables and insert data into new tables. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Project Template",
            "uri": "https://video.udacity-data.com/topher/2020/December/5fcdb6f5_project-template/project-template.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": {
        "key": "3a417e85-4652-46dd-90dc-0b8d5df5fa1d",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 18720,
        "semantic_type": "Project",
        "title": "Data Modeling with Postgres",
        "description": "Your **deliverables** will be a zip file or **Github repo** containing the files for your project. Alternatively, you can submit your project through the workspace.\n\nEnsure you meet specifications for all items in the [Project Rubric](https://review.udacity.com/#!/rubrics/2500/view). Your project  must **Meet Specifications** in each category in order for your submission to pass. \n\nIt can take us up to a week to grade the project, but in most cases it is much faster. You will get an email once your submission has been reviewed. In the meantime, you should feel free to proceed with your learning journey by continuing on to the next module in the program.\n\n## Project Submission Checklist\n\n**Before submitting your project, please review and confirm the following items.** \n<input type=\"checkbox\"> I am confident all rubric items have been met and my project will pass as submitted.\n<input type=\"checkbox\"> Project builds correctly without errors and runs.\n<input type=\"checkbox\"> All required functionality exists and my project behaves as expected per the project's specifications.\n\n**Once you have checked all these items, you are ready to submit!**\n",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2500",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 826262,
          "key": "7a6e1e47-cb4f-4e98-be3f-02d71fbd82f6",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7a6e1e47-cb4f-4e98-be3f-02d71fbd82f6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 826380,
              "key": "e91b0162-2291-487b-91c8-ef9b893bed63",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project: Data Modeling with Postgres\n\n### Introduction\nA startup called Sparkify wants to analyze the data they've been collecting on songs and user activity on their new music streaming app. The analytics team is particularly interested in understanding what songs users are listening to. Currently, they don't have an easy way to query their data, which resides in a directory of JSON logs on user activity on the app, as well as a directory with JSON metadata on the songs in their app.\n\nThey'd like a data engineer to create a Postgres database with tables designed to optimize queries on song play analysis, and bring you on the project. Your role is to create a database schema and ETL pipeline for this analysis. You'll be able to test your database and ETL pipeline by running queries given to you by the analytics team from Sparkify and compare your results with their expected results.\n\n### Project Description\nIn this project, you'll apply what you've learned on data modeling with Postgres and build an ETL pipeline using Python. To complete the project, you will need to define fact and dimension tables for a star schema for a particular analytic focus, and write an ETL pipeline that transfers data from files in two local directories into these tables in Postgres using Python and SQL. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 827157,
          "key": "a5609601-2314-4d8b-a7cf-e40048b3ee96",
          "title": "Project Datasets",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a5609601-2314-4d8b-a7cf-e40048b3ee96",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827158,
              "key": "9f35635b-0ee0-4045-84cd-c37e4d701501",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Song Dataset\nThe first dataset is a subset of real data from the [Million Song Dataset](https://labrosa.ee.columbia.edu/millionsong/). Each file is in JSON format and contains metadata about a song and the artist of that song. The files are partitioned by the first three letters of each song's track ID. For example, here are filepaths to two files in this dataset.\n```txt\nsong_data/A/B/C/TRABCEI128F424C983.json\nsong_data/A/A/B/TRAABJL12903CDCF1A.json\n```\nAnd below is an example of what a single song file, TRAABJL12903CDCF1A.json, looks like.\n```json\n{\"num_songs\": 1, \"artist_id\": \"ARJIE2Y1187B994AB7\", \"artist_latitude\": null, \"artist_longitude\": null, \"artist_location\": \"\", \"artist_name\": \"Line Renaud\", \"song_id\": \"SOUPIRU12A6D4FA1E1\", \"title\": \"Der Kleine Dompfaff\", \"duration\": 152.92036, \"year\": 0}```\n\n\n# Log Dataset\nThe second dataset consists of log files in JSON format generated by this [event simulator](https://github.com/Interana/eventsim) based on the songs in the dataset above. These simulate activity logs from a music streaming app based on specified configurations.\n\nThe log files in the dataset you'll be working with are partitioned by year and month. For example, here are filepaths to two files in this dataset.\n```txt\nlog_data/2018/11/2018-11-12-events.json\nlog_data/2018/11/2018-11-13-events.json\n```\nAnd below is an example of what the data in a log file, 2018-11-12-events.json, looks like.",
              "instructor_notes": ""
            },
            {
              "id": 827213,
              "key": "ecf52eb5-75cf-4792-8459-0b4d6568626d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c15e9_log-data/log-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ecf52eb5-75cf-4792-8459-0b4d6568626d",
              "caption": "",
              "alt": "",
              "width": 1525,
              "height": 460,
              "instructor_notes": null
            },
            {
              "id": 837543,
              "key": "e51017f9-9d84-49bd-b25d-0b1ffd7ed1d7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you would like to look at the JSON data within log_data files,  you will need to create a pandas dataframe to read the data. Remember to first import JSON and pandas libraries.\n\n`df = pd.read_json(filepath, lines=True)`\n\nFor example, `df = pd.read_json('data/log_data/2018/11/2018-11-01-events.json', lines=True)` would read the data file 2018-11-01-events.json.\n\nIn case you need a refresher on JSON file formats, [here is a helpful video](https://www.youtube.com/watch?time_continue=1&v=hO2CayzZBoA). ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 827214,
          "key": "1533c19b-0505-49fd-b1b7-06c987641f0d",
          "title": "Project Instructions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1533c19b-0505-49fd-b1b7-06c987641f0d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827226,
              "key": "e74f4f6f-fba5-438f-888f-085227b637b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Schema for Song Play Analysis\nUsing the song and log datasets, you'll need to create a star schema optimized for queries on song play analysis. This includes the following tables.\n\n#### Fact Table\n1. **songplays** - records in log data associated with song plays i.e. records with page `NextSong`  \n     - *songplay_id, start_time, user_id, level, song_id, artist_id, session_id, location, user_agent*\n\n#### Dimension Tables\n2. **users** - users in the app\n    - *user_id, first_name, last_name, gender, level*\n3. **songs** - songs in music database\n     - *song_id, title, artist_id, year, duration*\n4. **artists** - artists in music database\n     - *artist_id, name, location, latitude, longitude*\n5. **time** - timestamps of records in **songplays** broken down into specific units\n    - *start_time, hour, day, week, month, year, weekday*",
              "instructor_notes": ""
            },
            {
              "id": 827216,
              "key": "01d9431b-25db-45ce-8e60-22e5ffd9b4e8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Template\n\nTo get started with the project, go to the workspace on the next page, where you'll find the project template files. You can work on your project and submit your work through this workspace. Alternatively, you can download the project template files from the Resources folder if you'd like to develop your project locally.\n\nIn addition to the data files, the project workspace includes six files:\n1. `test.ipynb` displays the first few rows of each table to let you check your database.\n2. `create_tables.py` drops and creates your tables. You run this file to reset your tables before each time you run your ETL scripts.\n3. `etl.ipynb` reads and processes a single file from `song_data` and `log_data` and loads the data into your tables. This notebook contains detailed instructions on the ETL process for each of the tables.\n4. `etl.py` reads and processes files from `song_data` and `log_data` and loads them into your tables. You can fill this out based on your work in the ETL notebook.\n5. `sql_queries.py` contains all your sql queries, and is imported into the last three files above.\n6. `README.md` provides discussion on your project.",
              "instructor_notes": ""
            },
            {
              "id": 827215,
              "key": "35ce62e6-3917-4fd9-91ae-5054d688f7cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Steps\nBelow are steps you can follow to complete the project:\n\n### Create Tables\n1. Write `CREATE` statements in `sql_queries.py` to create each table.\n2. Write `DROP` statements in `sql_queries.py` to drop each table if it exists.\n2. Run `create_tables.py` to create your database and tables.\n3. Run `test.ipynb` to confirm the creation of your tables with the correct columns. Make sure to click \"Restart kernel\" to close the connection to the database after running this notebook.\n\n### Build ETL Processes\nFollow instructions in the `etl.ipynb` notebook to develop ETL processes for each table. At the end of each table section, or at the end of the notebook, run `test.ipynb` to confirm that records were successfully inserted into each table. Remember to rerun `create_tables.py` to reset your tables before each time you run this notebook.\n\n### Build ETL Pipeline\nUse what you've completed in `etl.ipynb` to complete `etl.py`, where you'll process the entire datasets. Remember to run `create_tables.py` before running `etl.py` to reset your tables. Run `test.ipynb` to confirm your records were successfully inserted into each table.\n\n### Document Process\nDo the following steps in your `README.md` file.\n1. Discuss the purpose of this database in the context of the startup, Sparkify, and their analytical goals.\n2. State and justify your database schema design and ETL pipeline.\n3. [Optional] Provide example queries and results for song play analysis.\n\nHere's a [guide](https://www.markdownguide.org/basic-syntax/) on Markdown Syntax.\n\n\n### **NOTE:** You will not be able to run `test.ipynb`, `etl.ipynb`, or `etl.py` until you have run `create_tables.py` at least once to create the `sparkifydb` database, which these other files connect to.",
              "instructor_notes": ""
            },
            {
              "id": 827229,
              "key": "1522b065-c366-4902-8f92-f3674468baf3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Rubric\nRead the project [rubric](https://review.udacity.com/#!/rubrics/2500/view) before and during development of your project to ensure you meet all specifications.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 826263,
          "key": "accaf78c-86f2-4b5a-ade3-e2f79ec16ae3",
          "title": "Project Workspace",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "accaf78c-86f2-4b5a-ade3-e2f79ec16ae3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 826267,
              "key": "f469cb62-369d-4e92-a21f-20df1fb32f4d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r766469c826263xJUPYTERLlyjhwqkl",
              "pool_id": "spark",
              "view_id": "jupyter-lab-x3sx9",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "allowSubmit": true,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 950384,
          "key": "30ba33c4-1687-4c72-8ef3-a7a42862235b",
          "title": "Project Cheat Sheet",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "30ba33c4-1687-4c72-8ef3-a7a42862235b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "[DEND] P1 Lessons Cheat Sheet",
                "uri": "https://video.udacity-data.com/topher/2019/October/5d9683fc_dend-p1-lessons-cheat-sheet/dend-p1-lessons-cheat-sheet.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 953161,
              "key": "32cf4da8-879e-4c7c-88b3-f50487aaff4d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Click to enlarge the images or download PDF file below.",
              "instructor_notes": ""
            },
            {
              "id": 950386,
              "key": "364b3f3c-975e-491a-8616-89b61f3125d6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/October/5d9683df_dend-p1-lessons-cheat-sheet-page1/dend-p1-lessons-cheat-sheet-page1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/364b3f3c-975e-491a-8616-89b61f3125d6",
              "caption": "",
              "alt": "",
              "width": 550,
              "height": 440,
              "instructor_notes": null
            },
            {
              "id": 950387,
              "key": "c13b2d2b-01d9-4d22-b61f-d4b267164d51",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/October/5d9683ed_dend-p1-lessons-cheat-sheet-page2/dend-p1-lessons-cheat-sheet-page2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c13b2d2b-01d9-4d22-b61f-d4b267164d51",
              "caption": "",
              "alt": "",
              "width": 550,
              "height": 440,
              "instructor_notes": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}