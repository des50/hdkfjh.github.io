WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.384
We are going to work with a DVD Rentals Sample Database,

00:00:05.384 --> 00:00:08.820
and the idea is to master the art of dimensional modeling.

00:00:08.820 --> 00:00:13.669
Actually, it's very hard just to know the rules and master it.

00:00:13.669 --> 00:00:17.640
You will need to see lots and lots of examples with different tricks and

00:00:17.640 --> 00:00:23.234
different assumptions to start actually building or getting trained in that art.

00:00:23.234 --> 00:00:28.574
So, the DVD Rentals Sample Database is called Sakila.

00:00:28.574 --> 00:00:32.570
It is a very classic sample database

00:00:32.570 --> 00:00:35.390
to work with and it's prior to the age of Netflix, let's say,

00:00:35.390 --> 00:00:40.579
but most students are

00:00:40.579 --> 00:00:45.539
familiar with it because it's in tutorials of MySQL and PostgresSQL.

00:00:45.759 --> 00:00:49.449
So, it looks like this.

00:00:49.450 --> 00:00:55.219
You can ask yourself how easy is it for you to understand this database schema?

00:00:55.219 --> 00:00:56.929
So, you can look here,

00:00:56.929 --> 00:00:59.600
you have rentals, you have payments, you have customers,

00:00:59.600 --> 00:01:01.875
you have stores, addressees,

00:01:01.875 --> 00:01:05.920
staff, language, film, actor, and so on.

00:01:06.439 --> 00:01:09.390
If you ask yourself how do I get,

00:01:09.390 --> 00:01:16.859
for example how much did a certain movies sell in this DVD rental shop?

00:01:16.859 --> 00:01:20.010
You will find that here,

00:01:20.010 --> 00:01:21.465
I have a payment.

00:01:21.465 --> 00:01:25.010
There is no direct relation between the payment and the film,

00:01:25.010 --> 00:01:30.745
but there's a relation between the payment and the rental kind of events,

00:01:30.745 --> 00:01:32.685
that a certain rental happened,

00:01:32.685 --> 00:01:35.219
and the rental refers to the inventory,

00:01:35.219 --> 00:01:37.609
and the inventory refers to the movie.

00:01:37.609 --> 00:01:43.079
So, if I want to get to know the sales of one film,

00:01:43.750 --> 00:01:50.540
I would actually need to join this table with this table with this table with this table.

00:01:50.540 --> 00:01:54.840
Well, for a trained SQL person actually,

00:01:54.840 --> 00:01:56.250
I'm sure you'd be able to do it,

00:01:56.250 --> 00:02:01.170
but it's a bit cumbersome actually for a business user to see that.

00:02:01.629 --> 00:02:06.274
Also this is actually a really, really simple database.

00:02:06.275 --> 00:02:07.710
It's in third normal form,

00:02:07.709 --> 00:02:09.944
it's complete and functional,

00:02:09.944 --> 00:02:19.419
but it's really kind of trivial in scope or relative to a real big business database.

00:02:19.419 --> 00:02:21.219
The second question would be,

00:02:21.219 --> 00:02:24.650
can you spot candidates for fact tables?

00:02:25.080 --> 00:02:27.880
I guess not the store, not the staff,

00:02:27.879 --> 00:02:32.030
not the film, if you sell sometimes.

00:02:32.030 --> 00:02:33.900
Yeah. I guess you guessed it right,

00:02:33.900 --> 00:02:36.900
that would be the rentals and the payments.

00:02:36.900 --> 00:02:40.490
Here, these are actually facts.

00:02:40.490 --> 00:02:43.290
These are events that happened.

00:02:44.860 --> 00:02:53.760
While actually, here you have the rental date and the return date not directly a fact,

00:02:53.759 --> 00:02:57.784
but perhaps also the amount is a fact.

00:02:57.784 --> 00:03:01.449
The difference between the rental data

00:03:01.449 --> 00:03:05.734
and the return date might be a derived fact and so forth.

00:03:05.735 --> 00:03:08.825
Can you spot candidates for dimension tables?

00:03:08.824 --> 00:03:11.414
Well basically, you have the customer,

00:03:11.414 --> 00:03:13.784
that's the person, the staff,

00:03:13.784 --> 00:03:16.930
physical things like the store,

00:03:17.240 --> 00:03:26.510
and the movie itself which is being sold actually can act as a dimension for the events.

00:03:26.509 --> 00:03:32.024
What about the rest? You have peripheral things like the inventory,

00:03:32.025 --> 00:03:36.050
and you might look at

00:03:36.050 --> 00:03:38.719
inventory events on its own from another perspective

00:03:38.719 --> 00:03:41.659
if you're analyzing the inventory efficiency or something like that.

00:03:41.659 --> 00:03:44.960
But you have also addresses and the language of the movie and things

00:03:44.960 --> 00:03:48.409
like that which might actually most of

00:03:48.409 --> 00:03:56.115
those things might be normalized inside the fact or the dimensions tables.

00:03:56.115 --> 00:03:59.594
So, that's the third normal form of schema,

00:03:59.594 --> 00:04:01.810
that's the star schema.

00:04:03.169 --> 00:04:07.099
You need to agree that this is actually

00:04:07.099 --> 00:04:10.759
indeed easier for business users to understand because you have one thing,

00:04:10.759 --> 00:04:13.319
here are the sales.

00:04:14.199 --> 00:04:16.649
You can group them by date,

00:04:16.649 --> 00:04:19.034
or customer, or store, or movie,

00:04:19.035 --> 00:04:22.800
or actually a group of them or all of them,

00:04:22.800 --> 00:04:27.980
but the idea is you have one clear kind of sales amount that you can work with.

00:04:27.980 --> 00:04:30.689
That is the fact you're working with.

00:04:30.689 --> 00:04:33.699
Of course, you can have many such fact tables,

00:04:33.699 --> 00:04:37.745
but they are going to be like nice and clear like this one.

00:04:37.745 --> 00:04:41.720
So, I hope that actually I was able to sell you

00:04:41.720 --> 00:04:47.310
the idea that the star schema is indeed easier to understand.

00:04:47.350 --> 00:04:49.985
How to move from here to there.

00:04:49.985 --> 00:04:52.990
We can take a Naive ETL approach first,

00:04:52.990 --> 00:04:55.689
very simple up to the scope of Sakila.

00:04:55.689 --> 00:04:59.689
We want to query the third normal form which is extracting data.

00:04:59.689 --> 00:05:03.379
We are going to join tables together to do a bit of the normalization,

00:05:03.379 --> 00:05:05.540
change the types, add new columns,

00:05:05.540 --> 00:05:09.064
that's transformation, then load into new tables.

00:05:09.064 --> 00:05:10.600
That's pretty much it.

