WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.929
Okay. If I scroll down to see how we are filling this,

00:00:06.929 --> 00:00:13.320
we are actually doing the following: we are doing select distinct, here.

00:00:13.320 --> 00:00:17.429
We are actually taking this,

00:00:17.429 --> 00:00:21.500
we are trying to take the date and retype in this format.

00:00:21.500 --> 00:00:25.829
That SQL function, which is taking payment date and saying

00:00:25.829 --> 00:00:31.379
TO_CHAR DATE is converting a long date into this year year,

00:00:31.379 --> 00:00:36.039
year, month, months, day format to act as the key for that thing.

00:00:36.049 --> 00:00:39.494
Then we do all our extractions.

00:00:39.494 --> 00:00:45.655
We also do something fancy for the is_weekend,

00:00:45.655 --> 00:00:47.820
or a weekend, I'm sorry.

00:00:47.820 --> 00:00:49.469
You have a function you can extract,

00:00:49.469 --> 00:00:54.689
but you have a function called the day of the week.

00:00:54.689 --> 00:00:58.664
At this day of the week function,

00:00:58.664 --> 00:01:03.000
we're going to say when it is six or seven,

00:01:03.000 --> 00:01:06.659
which is which is the sixth the Saturday and Sunday,

00:01:06.659 --> 00:01:09.959
then true it is a weekend, else it's false.

00:01:09.959 --> 00:01:16.039
So here, the date function is using a little bit of fancy SQL functions,

00:01:16.040 --> 00:01:18.880
but not all the data tables are like that.

00:01:18.879 --> 00:01:24.004
I can actually go with you through each dimensions like dim date,

00:01:24.004 --> 00:01:28.354
dim customer, dim movie, dim store, factSales.

00:01:28.355 --> 00:01:30.215
So we're creating those.

00:01:30.215 --> 00:01:39.105
But it's actually equally easy to look at the select statements for them.

00:01:39.105 --> 00:01:45.290
Okay. So, if you look for example at the customer table here,

00:01:45.290 --> 00:01:47.615
this is the customer table.

00:01:47.614 --> 00:01:52.054
We will see that we are getting all the usual suspects here,

00:01:52.055 --> 00:01:55.805
but we have something starting from address address two,

00:01:55.805 --> 00:01:57.755
and then we have district.

00:01:57.754 --> 00:02:02.939
The district actually is not in the customer,

00:02:02.939 --> 00:02:04.579
it's in the address.

00:02:04.579 --> 00:02:06.920
So we're actually denormalizing,

00:02:06.920 --> 00:02:11.449
and we're pushing these columns inside here,

00:02:11.449 --> 00:02:14.379
getting rid of this relationship.

00:02:14.379 --> 00:02:16.400
We're putting them here.

00:02:16.400 --> 00:02:18.960
You see this district and city.

00:02:18.960 --> 00:02:22.115
City is not even here, city is here.

00:02:22.115 --> 00:02:23.825
We're also putting it up.

00:02:23.824 --> 00:02:27.899
Country is here, and we're also putting the country.

00:02:27.900 --> 00:02:32.180
So, we actually collapsed using this address ID,

00:02:32.180 --> 00:02:34.730
we get all the information that we like,

00:02:34.729 --> 00:02:36.439
and push it inside.

00:02:36.439 --> 00:02:39.889
So, we're joining the customer on the address, the city,

00:02:39.889 --> 00:02:43.729
and the country, getting all the data denormalized inside.

00:02:43.729 --> 00:02:48.094
So, it's going to be convenient for a business user to use.

00:02:48.094 --> 00:02:52.180
Similarly, for the movie itself,

00:02:52.180 --> 00:02:55.955
we are getting inside something like the language,

00:02:55.955 --> 00:02:57.335
in which language this,

00:02:57.335 --> 00:02:58.415
it was also noted,

00:02:58.414 --> 00:03:00.599
we're getting it inside.

00:03:03.439 --> 00:03:08.375
For the movie, I think we're not doing anything fancy more than that.

00:03:08.375 --> 00:03:10.099
Also, for the store,

00:03:10.099 --> 00:03:12.620
we're getting all the addressees denormalized.

00:03:12.620 --> 00:03:15.140
But also the store has staff.

00:03:15.139 --> 00:03:18.704
The store, or is the store here has staff.

00:03:18.705 --> 00:03:22.330
So we actually put the name of the staff,

00:03:22.460 --> 00:03:25.995
the people who work there in the store.

00:03:25.995 --> 00:03:28.689
I think here it is.

00:03:28.849 --> 00:03:36.359
There must be a field here pointing to the managers staff ID.

00:03:36.360 --> 00:03:37.960
So each store has a manager,

00:03:37.960 --> 00:03:40.520
and the manager belongs to this stuff here.

00:03:40.520 --> 00:03:42.950
So we're putting this inside here.

00:03:42.949 --> 00:03:48.129
Then, we finally have our facts table.

00:03:50.300 --> 00:03:55.460
Here, we're going to take the payment.

00:03:55.460 --> 00:03:58.715
That is the main constituent of the facts table,

00:03:58.715 --> 00:04:02.555
but we're going to join it with the rental and the inventory.

00:04:02.555 --> 00:04:10.040
So we're going to take these two inside here,

00:04:10.039 --> 00:04:15.634
and actually this will give us a direct relation to the film.

00:04:15.634 --> 00:04:20.750
This will give us a direct relation to the film here. Very good.

00:04:20.750 --> 00:04:28.019
So, if you've followed all those select statements of how we're denormalizing.

00:04:28.019 --> 00:04:29.310
So we did two things;

00:04:29.310 --> 00:04:32.449
we denormalized and we did a little bit of transformation

00:04:32.449 --> 00:04:38.844
here with SQL functions to put new fields like the month and the day and so on.

00:04:38.845 --> 00:04:44.965
Perhaps, you might be asking or you are keeping asking what about this insert into?

00:04:44.964 --> 00:04:48.769
So the idea is, this is just the E part.

00:04:48.769 --> 00:04:51.074
So the select is the E part.

00:04:51.074 --> 00:04:55.865
This is the E, because we're selecting the data from the original table.

00:04:55.865 --> 00:05:00.745
The T part is actually either the extraction here,

00:05:00.745 --> 00:05:02.855
that we're building new columns,

00:05:02.855 --> 00:05:09.850
or that we are denormalizing by pulling in data denormalizing it inside other tables.

00:05:10.160 --> 00:05:13.140
So, if these are the E and the T,

00:05:13.139 --> 00:05:14.774
we have the L remaining.

00:05:14.774 --> 00:05:18.364
The L actually is the insert into.

00:05:18.365 --> 00:05:21.139
So whatever we get from here,

00:05:21.139 --> 00:05:27.254
we go and insert it into a new table.

00:05:27.254 --> 00:05:30.019
So, thus the name the ETL.

00:05:30.019 --> 00:05:31.609
So, in this step five,

00:05:31.610 --> 00:05:37.879
we're actually doing the ETL from the third normal form to the star schema.

00:05:37.879 --> 00:05:45.874
I hope you also followed that we actually had a naming convention,

00:05:45.874 --> 00:05:48.395
that we have dimension date,

00:05:48.394 --> 00:05:52.240
dimension movie, dimension customer, and so forth.

00:05:52.240 --> 00:05:55.245
For the fact, we have the prefix fact.

00:05:55.245 --> 00:05:58.620
Now, in this schema,

00:05:58.620 --> 00:06:01.009
you have one main fact table that

00:06:01.009 --> 00:06:04.969
constitutes what you want to present to a business user.

