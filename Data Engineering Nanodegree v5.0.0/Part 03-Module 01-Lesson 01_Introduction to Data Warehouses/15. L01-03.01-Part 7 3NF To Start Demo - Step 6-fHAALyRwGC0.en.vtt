WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.964
So actually, if you go and show the main fact table, it looks like this.

00:00:05.964 --> 00:00:07.990
I have a movie key, I have a date key,

00:00:07.990 --> 00:00:10.179
I have a customer key, and I have a sales amount.

00:00:10.179 --> 00:00:13.974
So the idea is that all of these are keys here.

00:00:13.974 --> 00:00:16.539
Of course, the date key is a little bit more beautiful

00:00:16.539 --> 00:00:19.119
because of the fancy transformation that we did,

00:00:19.120 --> 00:00:22.745
but it could have been also any key like that one.

00:00:22.745 --> 00:00:26.890
Now, what remains actually is if we join here,

00:00:26.890 --> 00:00:29.664
that's a simple join because we know that

00:00:29.664 --> 00:00:34.269
movie key would get us here and then we would pick the title,

00:00:34.270 --> 00:00:35.770
or the language, or the length,

00:00:35.770 --> 00:00:37.720
or the rating if we so wish.

00:00:37.719 --> 00:00:43.979
So that is not a very complicated and fancy join understand for the business user.

00:00:43.979 --> 00:00:45.704
Let's do that join.

00:00:45.704 --> 00:00:49.649
So we select, we're going to use the movie,

00:00:49.649 --> 00:00:51.299
the date, and the customer.

00:00:51.299 --> 00:00:54.104
On the corresponding keys,

00:00:54.104 --> 00:00:56.379
the joining key is here.

00:00:59.210 --> 00:01:01.814
Instead of a key here,

00:01:01.814 --> 00:01:03.644
we get the title.

00:01:03.645 --> 00:01:07.799
Instead of key here, we get Salinas, the city.

00:01:07.799 --> 00:01:12.884
Instead of the date key, we actually get month one, which is January.

00:01:12.885 --> 00:01:18.310
Remember, always the time limiting my data here.

00:01:18.310 --> 00:01:22.609
We go again and start grouping.

00:01:22.609 --> 00:01:31.200
So we can compute the cubes that we did before was that very not nice join.

00:01:32.980 --> 00:01:42.825
What I was doing here is trying to measure this cube which took 114 milliseconds from me.

00:01:42.825 --> 00:01:53.250
That output actually, I should run it here again perhaps or did I do wrong.

00:01:53.250 --> 00:01:57.629
Sorry, I was inserting again.

00:01:57.629 --> 00:01:59.534
That was not good.

00:01:59.534 --> 00:02:02.099
I should have run this side.

00:02:02.099 --> 00:02:07.390
So that ran in 136 milliseconds.

00:02:08.030 --> 00:02:11.909
That one, let us run it.

00:02:11.909 --> 00:02:15.389
Run in 148.

00:02:15.389 --> 00:02:18.388
Indifference instances is going to be different,

00:02:18.389 --> 00:02:20.805
but the point is here,

00:02:20.805 --> 00:02:26.200
that this one runs much faster than this one.

