WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.589
So, we have actually four distribution styles: the EVEN distribution,

00:00:07.589 --> 00:00:09.629
the ALL distribution, the AUTO distribution,

00:00:09.630 --> 00:00:12.780
and the KEY distribution.

00:00:12.779 --> 00:00:14.804
Let's take the first one.

00:00:14.804 --> 00:00:17.449
Before trying to optimize anything at all,

00:00:17.449 --> 00:00:21.149
the idea would be that we have a table like that.

00:00:21.149 --> 00:00:23.369
Look at that table, and, let's say,

00:00:23.370 --> 00:00:28.890
this table has 1,000 rows for the simplicity of the arithmetic here.

00:00:28.890 --> 00:00:32.909
It has a primary key,

00:00:32.909 --> 00:00:36.419
but it has also a fact table here.

00:00:36.420 --> 00:00:39.825
[inaudible] sales fact.

00:00:39.825 --> 00:00:45.175
It has a reference to a dimension, which is the store.

00:00:45.174 --> 00:00:48.979
We start copying this into our table,

00:00:48.979 --> 00:00:54.469
and whether the copy itself is in parallel or is in multiple files,

00:00:54.469 --> 00:00:58.019
that's, well, a little bit beside the fact,

00:00:58.020 --> 00:01:04.445
but the usual case is going to be that we are copying the file in parallel files.

00:01:04.444 --> 00:01:07.204
But this fact aside,

00:01:07.204 --> 00:01:13.140
right shift wants to load-balance the amount of data here.

00:01:13.140 --> 00:01:16.150
So, ideally, if these are 1,000 rows,

00:01:16.150 --> 00:01:22.609
we would like to have 250 rows on each of those slices.

00:01:22.609 --> 00:01:26.625
The idea would be, it is going to put one row here, one row here,

00:01:26.625 --> 00:01:28.739
one row here, one row here: one, two,

00:01:28.739 --> 00:01:31.500
three, four, five, six, seven, eight.

00:01:31.500 --> 00:01:34.049
That would be a round robin fashion,

00:01:34.049 --> 00:01:37.480
and we don't know how many are coming.

00:01:37.480 --> 00:01:39.109
So, instead of doing any math,

00:01:39.109 --> 00:01:43.219
we just go and give each server one row,

00:01:43.219 --> 00:01:46.179
and that would even out the load.

00:01:46.180 --> 00:01:50.450
Let's take another example where we have a table which is much smaller,

00:01:50.450 --> 00:01:52.040
which is 40 rows,

00:01:52.040 --> 00:01:53.600
which is a dimension table.

00:01:53.599 --> 00:01:57.500
Here, that would be the store itself in New York or in California, and so on.

00:01:57.500 --> 00:01:59.855
Let's assume we copy that table, and,

00:01:59.855 --> 00:02:02.189
well, no surprises here,

00:02:02.189 --> 00:02:04.920
we get 10 rows each, and, again, one,

00:02:04.920 --> 00:02:06.420
two, three, four, five,

00:02:06.420 --> 00:02:08.564
six, seven, eight, and so forth.

00:02:08.564 --> 00:02:11.800
Now, let's think about what is going to happen,

00:02:11.800 --> 00:02:13.580
and that's a crucial part.

00:02:13.580 --> 00:02:16.435
Let's take that really slow.

00:02:16.435 --> 00:02:22.115
What is going to happen if we try to join the facts and the dimension to get

00:02:22.115 --> 00:02:28.100
out something like instead of the foreign key of the store,

00:02:28.099 --> 00:02:31.324
we get actually the store itself,

00:02:31.324 --> 00:02:32.659
which is either New York,

00:02:32.659 --> 00:02:35.329
California, or something like that?

00:02:35.330 --> 00:02:38.219
So, we're going to join here.

00:02:38.219 --> 00:02:43.509
Both of them are actually done with the even distribution, no cleverness whatsoever.

00:02:43.509 --> 00:02:45.424
So, take a look here.

00:02:45.425 --> 00:02:47.090
We want to get this,

00:02:47.090 --> 00:02:55.455
but we want to replace this two with the actual store name. Where is that?

00:02:55.455 --> 00:02:59.355
That's on CPU number 2 with storage number 2.

00:02:59.354 --> 00:03:02.824
Actually, each one of those has its own storage.

00:03:02.824 --> 00:03:07.099
So, actually, what we would have to do for each case

00:03:07.099 --> 00:03:11.180
of those is that we will have to take, for instance,

00:03:11.180 --> 00:03:17.675
that key five to here and to here,

00:03:17.675 --> 00:03:25.630
and we'll have to take this two into here and into here.

00:03:25.629 --> 00:03:29.585
Luckily, we have a two here on the same CPU,

00:03:29.585 --> 00:03:32.165
so we don't need to incur any network traffic.

00:03:32.164 --> 00:03:34.489
It would have been fantastic if

00:03:34.490 --> 00:03:39.814
all the foreign keys had resided actually on the same machine as we are.

00:03:39.814 --> 00:03:43.520
Going forth, we will see here also that

00:03:43.520 --> 00:03:47.765
this key would have to be disseminated to here and here.

00:03:47.764 --> 00:03:51.154
We're not done yet, that one would have to go here.

00:03:51.155 --> 00:03:55.715
The idea is, we're not speaking about 40 and 100 rows.

00:03:55.715 --> 00:03:58.384
This is the trivial example that can fit a slide,

00:03:58.384 --> 00:04:00.139
not even all of it fits the slide.

00:04:00.139 --> 00:04:02.419
We're talking here about 100 and 1,000,

00:04:02.419 --> 00:04:04.489
possibly millions, of rows.

00:04:04.490 --> 00:04:13.534
So, the sending of these keys all over the place is known as shuffling.

00:04:13.534 --> 00:04:15.844
When we join a table,

00:04:15.844 --> 00:04:20.709
we do lots of shuffling if we have a naive strategy here.

00:04:20.709 --> 00:04:25.529
Thus, we can actually do a little bit better.

