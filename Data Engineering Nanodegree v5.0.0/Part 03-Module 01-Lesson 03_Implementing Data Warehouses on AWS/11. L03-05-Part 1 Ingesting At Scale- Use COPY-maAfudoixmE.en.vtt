WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.450
So, now that we have delved into the general details of ETL,

00:00:03.450 --> 00:00:07.575
let's take a look at Redshift specific ETL.

00:00:07.575 --> 00:00:14.070
So, the idea is we're going to move big amounts of data and

00:00:14.070 --> 00:00:15.929
we want to take the data from

00:00:15.929 --> 00:00:20.730
the S3 staging area to Redshift and we do that basically using the Copy command.

00:00:20.730 --> 00:00:23.170
Naturally insert would work as well in a loop,

00:00:23.170 --> 00:00:27.145
but you would never want to do that because inserting things

00:00:27.144 --> 00:00:32.539
like data row by row is going to be really, really, really slow.

00:00:32.539 --> 00:00:39.100
Okay. So, use the Copy command and it does like bulk upload of the data there.

00:00:39.100 --> 00:00:43.704
The idea is if you're going to do that sometimes you're going to have

00:00:43.704 --> 00:00:48.614
really big files and if the file is large in size,

00:00:48.615 --> 00:00:53.480
it's actually better to break the file into multiple files.

00:00:53.479 --> 00:00:55.070
If you do that,

00:00:55.070 --> 00:01:01.204
the copy command automatically will ingest the file in parallel.

00:01:01.204 --> 00:01:08.015
Once it sees that the file is actually divided into a number of smaller files,

00:01:08.015 --> 00:01:11.655
it will start parallelizing the copying effort.

00:01:11.655 --> 00:01:16.045
However, how would it know that a bunch of files belong together?

00:01:16.045 --> 00:01:17.475
Basically you have two ways.

00:01:17.474 --> 00:01:20.659
Either they have a common prefix or

00:01:20.659 --> 00:01:24.754
you would use a manifest file and we will give you examples of these shortly.

00:01:24.754 --> 00:01:31.564
Other considerations are that the individual whether it's big or small,

00:01:31.564 --> 00:01:33.379
it's better to make

00:01:33.379 --> 00:01:38.414
those ones compressed from the beginning like in Gzip format or something.

00:01:38.415 --> 00:01:43.625
Because you want to also make all the traffic much slower,

00:01:43.625 --> 00:01:47.094
we're still in the cloud and the internal network is very fast,

00:01:47.094 --> 00:01:51.260
but we're coming here because we have actually big loads to work with.

00:01:51.260 --> 00:01:55.025
So we would want to minimize the network traffic.

00:01:55.025 --> 00:01:58.035
Another also trick that has to do with the network performance

00:01:58.034 --> 00:02:02.469
is that one should work in the same AWS region.

00:02:02.469 --> 00:02:06.349
So, you should try to make

00:02:06.349 --> 00:02:11.960
your staging area and the same AWS region as the Redshift cluster.

00:02:11.960 --> 00:02:17.525
As a small detail you might need to know about the copy command is that you can also

00:02:17.525 --> 00:02:24.510
have a custom delimiter if it's not the comma which is used from your source tool.

