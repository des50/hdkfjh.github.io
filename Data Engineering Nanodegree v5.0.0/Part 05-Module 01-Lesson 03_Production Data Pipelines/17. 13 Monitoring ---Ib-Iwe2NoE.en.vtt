WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.819
As we all know, software can fail.

00:00:02.819 --> 00:00:05.535
We've worked hard in this course to learn best practices

00:00:05.535 --> 00:00:08.370
and construct resilient data pipelines in airflow.

00:00:08.369 --> 00:00:10.754
Even with all that effort, at some point,

00:00:10.755 --> 00:00:14.760
we'll encounter a bug and need to fix a problem in our production data pipelines.

00:00:14.759 --> 00:00:16.980
With proper monitoring, we can be aware of

00:00:16.980 --> 00:00:20.310
these issues as soon as they occur and act to fix them.

00:00:20.309 --> 00:00:23.594
In this section, we'll learn about airflows monitoring features,

00:00:23.594 --> 00:00:26.924
and how you can use them to stay ahead of pipeline problems.

00:00:26.925 --> 00:00:31.125
Airflow DAGs optionally specify an SLA or service level agreement.

00:00:31.125 --> 00:00:33.270
We mentioned this a couple times in the class.

00:00:33.270 --> 00:00:38.505
But it's also worth noting that this can be defined as a task parameter,

00:00:38.505 --> 00:00:41.460
time by which your task must complete.

00:00:41.460 --> 00:00:43.390
For time sensitive applications,

00:00:43.390 --> 00:00:46.880
these features are critical for developing trust amongst your pipeline customers,

00:00:46.880 --> 00:00:49.655
and ensuring that data is delivered while still meaningful.

00:00:49.655 --> 00:00:52.789
Slipping SLAs can also be early indicators of

00:00:52.789 --> 00:00:56.335
performance problems or need to scale the size of your airflow cluster.

00:00:56.335 --> 00:00:59.600
Here, I've taken a screenshot of the airflow UI.

00:00:59.600 --> 00:01:01.700
You can see that I clicked on Browse,

00:01:01.700 --> 00:01:05.180
and then I clicked on SLA misses to get us to this page.

00:01:05.180 --> 00:01:06.995
So, in this example,

00:01:06.995 --> 00:01:09.410
I set a couple of SLAs on lesson three,

00:01:09.409 --> 00:01:13.729
exercise one, just to demonstrate what a missed SLA looks like.

00:01:13.730 --> 00:01:20.750
So, if you're administrating an airflow data pipeline and you set an SLA on your tasks,

00:01:20.750 --> 00:01:23.269
and your test started to miss their SLAs,

00:01:23.269 --> 00:01:24.950
you can go to Browse,

00:01:24.950 --> 00:01:30.079
SLA misses and see which of the tasks of your DAGs are starting to miss their timelines.

00:01:30.079 --> 00:01:34.969
This is incredibly useful if you want to stay ahead of data getting out of date.

00:01:34.969 --> 00:01:40.144
Airflow can be configured to send emails on DAG and task state changes.

00:01:40.144 --> 00:01:46.789
These state changes may include successes, failures, or retries.

00:01:46.790 --> 00:01:50.750
Failure emails can allow you to easily trigger alerts.

00:01:50.750 --> 00:01:56.224
It's common for alerting systems like PagerDuty to accept emails as a source of alerts.

00:01:56.224 --> 00:01:58.729
If a mission critical data pipeline fails,

00:01:58.730 --> 00:02:00.255
one that your business relies on,

00:02:00.254 --> 00:02:04.280
you will need to know as soon as possible to get online and get it fixed.

00:02:04.280 --> 00:02:07.430
Airflow also comes out of the box with the ability to send

00:02:07.430 --> 00:02:11.314
system metrics using a metrics aggregator called Statsd.

00:02:11.314 --> 00:02:15.500
Statsd can be coupled with metrics visualization tools like Grafana,

00:02:15.500 --> 00:02:18.139
to provide you and your team high-level insights into

00:02:18.139 --> 00:02:21.544
the overall performance of your DAGs, jobs, and tasks.

00:02:21.544 --> 00:02:25.489
You can check the classroom notes to learn more about Statsd and Grafana,

00:02:25.490 --> 00:02:28.310
and how to get airflow to work with those two tools.

00:02:28.310 --> 00:02:31.340
You can watch these metrics over time to see if

00:02:31.340 --> 00:02:35.240
your airflow installation is growing slow or has gone offline.

00:02:35.240 --> 00:02:39.439
These systems can be integrated into your alerting system such as PagerDuty,

00:02:39.439 --> 00:02:42.245
so that you can ensure problems are dealt with immediately.

00:02:42.245 --> 00:02:46.370
Most importantly, airflow system level metrics allow you and your team to

00:02:46.370 --> 00:02:50.855
stay ahead of issues before they even occur by watching long-term trends.

00:02:50.854 --> 00:02:52.354
So, in this example,

00:02:52.354 --> 00:02:54.769
you can see the number of tasks successes for

00:02:54.770 --> 00:02:58.850
our entire airflow installation from a given period of time.

00:02:58.849 --> 00:03:02.509
So you can see the number of successes changing on the y-axis,

00:03:02.509 --> 00:03:06.155
and the time progressing on the x-axis.

00:03:06.155 --> 00:03:11.500
This visualization that you're seeing was taken as a screenshot out of Grafana,

00:03:11.500 --> 00:03:14.590
driven by the stats from Statsd.

