WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.790
So, the solution for exercise two

00:00:02.790 --> 00:00:06.750
can be a little different depending upon exactly how you decided to break it apart.

00:00:06.750 --> 00:00:09.089
You may have decided to make multiple DAGs,

00:00:09.089 --> 00:00:12.285
or you may have decided just to create tasks within that DAG.

00:00:12.285 --> 00:00:15.974
In my solution, I actually just created one dag,

00:00:15.974 --> 00:00:17.925
so I didn't add an additional DAG,

00:00:17.925 --> 00:00:25.050
and it created multiple tasks from our old giant single task.

00:00:25.050 --> 00:00:28.380
So, you can see here we have our DAG,

00:00:28.379 --> 00:00:33.075
we have the log oldest function which we created in the demonstration,

00:00:33.075 --> 00:00:35.495
I've also created a log youngest task here,

00:00:35.494 --> 00:00:39.709
or a log youngest function for us to call from a Python operator.

00:00:39.710 --> 00:00:45.015
Below, we have our create_oldest_ task and our log_oldest_task which you already saw.

00:00:45.015 --> 00:00:48.960
Likewise, we have a create_youngest_task and log_youngest_task,

00:00:48.960 --> 00:00:51.770
which are nearly identical to the create_oldest and

00:00:51.770 --> 00:00:55.315
log_oldest_tasks, but operate independently.

00:00:55.314 --> 00:00:59.539
Finally, we have our lifetime rides task which creates a table,

00:00:59.539 --> 00:01:04.474
and we have our city station count task which also creates a city station counts table.

00:01:04.474 --> 00:01:07.250
At the very bottom, we have our ordering defined.

00:01:07.250 --> 00:01:10.659
So we say that create_oldest_task must run before log_oldest_task,

00:01:10.659 --> 00:01:19.579
and create_youngest_task must run before the log_youngest_task.

00:01:19.760 --> 00:01:23.640
You'll notice that the lifetime_rides_task and

00:01:23.640 --> 00:01:29.000
city_stations_task do not appear in the ordering of our DAG.

00:01:29.000 --> 00:01:34.950
The reason for that is they're independent from the create_oldest and youngest_tasks.

00:01:34.950 --> 00:01:39.204
So if we scroll to the top and go to the graph view,

00:01:39.204 --> 00:01:42.424
we can see that those two tasks can run

00:01:42.424 --> 00:01:46.355
independently of create_oldest and create_youngest.

00:01:46.355 --> 00:01:51.260
Let's go back to the DAG view and we're going to trigger a run of this solution.

00:01:51.260 --> 00:01:54.245
Actually first, I need to turn the DAG on,

00:01:54.245 --> 00:01:55.655
so DAG is now on,

00:01:55.655 --> 00:01:59.250
and I'm going to trigger a run of solution two.

00:02:00.950 --> 00:02:03.719
Now, we'll open that back up,

00:02:03.719 --> 00:02:08.064
and you can see that we've got a run scheduled, so it's executing.

00:02:08.064 --> 00:02:09.340
Go to the graph view,

00:02:09.340 --> 00:02:12.550
and you already notice how much faster

00:02:12.550 --> 00:02:16.155
this is running then the first time we ran this when we had just a single task.

00:02:16.155 --> 00:02:18.909
Lifetime_rides and city_station_count are already complete,

00:02:18.909 --> 00:02:21.655
create_youngest and create_oldest are running.

00:02:21.655 --> 00:02:26.254
Now, they're completed and we're going to log the oldest and youngest.

00:02:26.254 --> 00:02:31.664
So, in the time it took to really just run a couple of tasks in this,

00:02:31.664 --> 00:02:37.384
we were able to get through all six of our tasks.

00:02:37.384 --> 00:02:40.439
So, not only do we have a speed advantage from doing this,

00:02:40.439 --> 00:02:44.180
but the visibility of our DAG is much much better.

