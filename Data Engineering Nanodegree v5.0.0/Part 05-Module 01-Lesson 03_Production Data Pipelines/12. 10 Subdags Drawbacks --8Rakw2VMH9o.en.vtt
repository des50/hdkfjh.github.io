WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.759
It's important to be aware that subDAGs do have

00:00:02.759 --> 00:00:05.894
a number of downsides in addition to their upsides.

00:00:05.894 --> 00:00:09.689
First, subDAGs limit your visibility within the Airflow UI.

00:00:09.689 --> 00:00:13.004
When we replace repeated tasks with the subDAG,

00:00:13.005 --> 00:00:16.650
it's not immediately obvious what steps are happening within the subDAG.

00:00:16.649 --> 00:00:18.134
As you can see here,

00:00:18.135 --> 00:00:21.330
we have the create_trips_table and a create_stations_table,

00:00:21.329 --> 00:00:22.875
the load, the check,

00:00:22.875 --> 00:00:25.125
and it's very clear what's happening.

00:00:25.125 --> 00:00:29.490
If I was a user who had never seen this DAG before and open up the Airflow UI,

00:00:29.489 --> 00:00:33.254
I'd have a pretty good idea of what was happening by looking at these steps.

00:00:33.255 --> 00:00:36.300
As you can see here, our code may have gotten simpler by adding

00:00:36.299 --> 00:00:40.015
a subDAG but it's a lot less clear what the subDAGs themselves are doing.

00:00:40.015 --> 00:00:43.410
You'd have to actually click on the trips_subDAG or

00:00:43.409 --> 00:00:48.169
the stations_subDAG to actually see the steps that make up that DAG.

00:00:48.170 --> 00:00:51.710
The key takeaway here is that you should apply subDAGs only

00:00:51.710 --> 00:00:55.505
when you think you have more than one use case in your code already.

00:00:55.505 --> 00:00:57.995
If you think you might have a use case in the future,

00:00:57.994 --> 00:01:00.530
the additional complexity and reduced usability in

00:01:00.530 --> 00:01:05.570
the UI is likely not worth the trade off until the time actually comes.

00:01:05.569 --> 00:01:07.589
SubDAGs are easy to abuse,

00:01:07.590 --> 00:01:10.450
so think twice before using them.

00:01:10.450 --> 00:01:13.820
Second, subDAGs are not properly scoped are often

00:01:13.819 --> 00:01:17.299
more difficult to understand than the code they originally replaced.

00:01:17.299 --> 00:01:20.524
Let's pretend in the previous example we had simply included

00:01:20.525 --> 00:01:24.305
the table calculations step of our DAG into the subDAG as well.

00:01:24.305 --> 00:01:30.750
So, here, it's no longer just S3ToRedShiftSubDAG, it's now S3ToRedShiftCalculateSubDAG.

00:01:30.750 --> 00:01:32.944
Again, we have calculate added in.

00:01:32.944 --> 00:01:36.500
At this point, we've given up a lot of visibility into how our DAG works.

00:01:36.500 --> 00:01:40.635
We just have this one giant box for both of our DAGs.

00:01:40.635 --> 00:01:43.484
What does the subDAG calculating anyway?

00:01:43.484 --> 00:01:46.715
How is it applying the calculation in a title?

00:01:46.715 --> 00:01:49.210
What calculation is it even using?

00:01:49.209 --> 00:01:53.329
Though it may sound appealing to obstract away the entirety of our data pipeline,

00:01:53.329 --> 00:01:55.655
we've actually obfuscated the purpose of the pipeline

00:01:55.655 --> 00:01:58.474
and made it much more difficult to understand what's going on.

00:01:58.474 --> 00:02:02.724
Third, subDAGs tend to encourage premature optimization.

00:02:02.724 --> 00:02:05.419
Make sure you're creating a subDAG obstraction that is

00:02:05.420 --> 00:02:09.199
justified by an opportunity for reuse or clarity.

00:02:09.199 --> 00:02:11.149
As Donald Knuth once said,

00:02:11.150 --> 00:02:14.465
"Premature optimization is the root of all evil."

00:02:14.465 --> 00:02:17.090
Although those quote may be a bit dramatic,

00:02:17.090 --> 00:02:19.340
it is fun and makes an excellent point about

00:02:19.340 --> 00:02:23.585
how good intentions can lead to bad outcomes as far as obstractions go.

00:02:23.585 --> 00:02:25.579
To put that quote in context,

00:02:25.579 --> 00:02:28.580
Donald Knuth was pointing out that engineers often focus on

00:02:28.580 --> 00:02:31.960
finding efficiencies and noncritical parts of the programs.

00:02:31.960 --> 00:02:34.305
He prefaces this quote by saying,

00:02:34.305 --> 00:02:36.770
"These attempts at efficiency actually have

00:02:36.770 --> 00:02:40.670
a strong negative impact when debugging and maintenance are considered."

00:02:40.669 --> 00:02:43.569
So, we've all seen this affecting code before.

00:02:43.569 --> 00:02:47.750
SubDAGs are a powerful tool but they're ripe for abuse if used incorrectly.

00:02:47.750 --> 00:02:50.539
Make sure you're creating a subDAG obstraction that is

00:02:50.539 --> 00:02:53.734
justified by an opportunity for reuse or clarity.

00:02:53.735 --> 00:02:57.250
To finish out that quote from Donald Knuth, he also notes that,

00:02:57.250 --> 00:02:59.460
we should not forget about small efficiencies,

00:02:59.460 --> 00:03:01.724
say, 97 percent of the time.

00:03:01.724 --> 00:03:05.614
That we should never pass up that opportunity in that critical three percent.

00:03:05.615 --> 00:03:08.990
So, the reason I brought that up is it's not so

00:03:08.990 --> 00:03:12.350
much that the ratio matters 97 percent versus three percent,

00:03:12.349 --> 00:03:15.979
but that even though subDAGs can be difficult to use,

00:03:15.979 --> 00:03:19.840
they are very important to use when the time is appropriate.

00:03:19.840 --> 00:03:22.250
You'll develop a sense for this as you go through and

00:03:22.250 --> 00:03:25.099
you'll see an example of it in the coming demonstration.

