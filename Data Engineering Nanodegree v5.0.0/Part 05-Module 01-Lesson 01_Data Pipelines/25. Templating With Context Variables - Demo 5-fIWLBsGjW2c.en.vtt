WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.240
Airflow provides a number of context variables specific to

00:00:03.240 --> 00:00:06.720
the execution of a given DAG and a task at runtime.

00:00:06.719 --> 00:00:10.379
These context variables like execution date are often useful in

00:00:10.380 --> 00:00:14.415
the process of accessing or segmenting data before processing.

00:00:14.414 --> 00:00:18.269
This looks very similar to our hello world function that we saw earlier.

00:00:18.269 --> 00:00:21.600
We have a function defined here called hello_date.

00:00:21.600 --> 00:00:23.175
Hello is a little bit different.

00:00:23.175 --> 00:00:26.835
We have *args, and **kwargs, and we're printing,

00:00:26.835 --> 00:00:32.219
we're using a Python 3 formatted string here to print hello,

00:00:32.219 --> 00:00:36.825
and then referencing keyword arguments execution_date.

00:00:36.825 --> 00:00:42.900
So, what this is doing is it's trying to get the named variable,

00:00:42.899 --> 00:00:46.219
execution_date are the keyword arguments. Where's that coming from?

00:00:46.219 --> 00:00:47.945
We don't really have it in here anywhere.

00:00:47.945 --> 00:00:50.274
Well, it's coming from context.

00:00:50.274 --> 00:00:55.259
So, we've changed our PythonOperator to provide_context equal True.

00:00:55.259 --> 00:00:58.519
in doing that, Airflow is automatically

00:00:58.520 --> 00:01:01.545
going to pass through a number of runtime variables

00:01:01.545 --> 00:01:04.879
to the application such that you can

00:01:04.879 --> 00:01:08.734
access them in your Python function or in other operators.

00:01:08.734 --> 00:01:10.519
So, see what that would look like.

00:01:10.519 --> 00:01:11.950
So, before we do the demo,

00:01:11.950 --> 00:01:13.234
and we come back here.

00:01:13.234 --> 00:01:18.224
Turn off lesson1.demo4, and we're going to jump into lesson5.

00:01:18.224 --> 00:01:22.169
So, we're going to go demo5, and we're going to open that up.

00:01:22.170 --> 00:01:26.820
So, we're going to see here that we aren't providing context yet.

00:01:26.819 --> 00:01:31.643
On line 25, 29 we have a PythonOperator called list_task,

00:01:31.644 --> 00:01:34.085
which we need to pass in contexts too.

00:01:34.084 --> 00:01:42.375
So, if we come over here or say provide_context equal True.

00:01:42.375 --> 00:01:45.015
So, this means that PythonOperator will get

00:01:45.015 --> 00:01:48.439
the runtime context that it needs

00:01:48.439 --> 00:01:52.265
to actually print out any of the variables that we might be interested in.

00:01:52.265 --> 00:01:54.379
Now, before we continue,

00:01:54.379 --> 00:01:59.644
I want to show you a list of the variables that are available to Airflow.

00:01:59.644 --> 00:02:01.700
So, I'm going to go back here,

00:02:01.700 --> 00:02:04.140
and open a new tab,

00:02:04.420 --> 00:02:08.090
and I'm going to open up the Airflow documentation.

00:02:08.090 --> 00:02:11.270
Now, I've included this list in your example as well.

00:02:11.270 --> 00:02:15.305
So, don't worry about having to go find this documentation through Google or other means.

00:02:15.305 --> 00:02:18.335
Just go to the demo exercise,

00:02:18.335 --> 00:02:20.740
and when you're doing the exercise like this,

00:02:20.740 --> 00:02:22.754
just grab this link,

00:02:22.754 --> 00:02:26.780
go to your browser, and you can take a look at what's in here.

00:02:26.780 --> 00:02:31.145
So, we have all these variables to find here; ds, prev_ds.

00:02:31.145 --> 00:02:33.365
I'm not going to go through all of these,

00:02:33.365 --> 00:02:35.105
it's a pretty extensive list.

00:02:35.104 --> 00:02:37.429
But I do want to talk about the one that we've already talked

00:02:37.430 --> 00:02:40.515
about a little bit in our example, which was execution_date.

00:02:40.514 --> 00:02:43.754
We can see here what execution_date is,

00:02:43.754 --> 00:02:47.250
is a datetime.datetime object.

00:02:47.250 --> 00:02:51.319
So, this is going to tell us essentially what is

00:02:51.319 --> 00:02:56.180
the date on which this task is actually executing.

00:02:56.180 --> 00:02:58.685
Now, this is really useful if you're backfilling.

00:02:58.685 --> 00:03:02.969
Let's say you're running a DAG that was scheduled for 2013,

00:03:02.969 --> 00:03:07.020
and it's 2019 or 2020 or whenever it is today,

00:03:07.020 --> 00:03:12.594
Airflow is going to tell the DAG when it runs when it was intended to be run.

00:03:12.594 --> 00:03:15.984
This is very useful for backfilling in segmenting data.

00:03:15.985 --> 00:03:18.120
We're going to talk more about segmenting data later.

00:03:18.120 --> 00:03:21.170
But for now, I want you guys just to focus on looking at the kinds

00:03:21.169 --> 00:03:24.724
of variables that are going to be provided to you through context.

00:03:24.724 --> 00:03:29.049
So, now that we're going to go back to our DAG,

00:03:29.050 --> 00:03:31.185
and I think real quick before we go,

00:03:31.185 --> 00:03:34.129
I'm going to print off this ds variable in my demonstration.

00:03:34.129 --> 00:03:35.854
So, this is a nice simple one.

00:03:35.854 --> 00:03:40.584
It's just going to print the execution date as a string in the format YYYY-MM-DD.

00:03:40.585 --> 00:03:48.944
So, again, I don't care about these double brackets on either side.

00:03:48.944 --> 00:03:50.984
Their variable name is the same inquiries,

00:03:50.985 --> 00:03:52.200
so we want the ds.

00:03:52.199 --> 00:03:56.204
I'm going to take that, I'm going to go back here.

00:03:56.205 --> 00:03:59.685
So, I have this log_details function and I'm saying,

00:03:59.685 --> 00:04:01.965
"I need the logs and details of the run."

00:04:01.965 --> 00:04:03.435
Well, to do that.

00:04:03.435 --> 00:04:06.354
I need to get rid of this pass because we want to actually do something.

00:04:06.354 --> 00:04:08.329
Just like in the first exercise,

00:04:08.330 --> 00:04:10.955
I'm going to do a logging.info statement here.

00:04:10.955 --> 00:04:12.860
Now, the big difference here is,

00:04:12.860 --> 00:04:15.410
I'm going to use a Python 3 format string.

00:04:15.409 --> 00:04:18.379
Okay. But I haven't put anything in the string yet.

00:04:18.379 --> 00:04:23.894
Let's say, My execution date is",

00:04:23.894 --> 00:04:30.779
and then I'm going to put in the brackets that Python knows to render this.

00:04:30.779 --> 00:04:34.524
I'm going to go in here, I'm going to say kwargs,

00:04:34.524 --> 00:04:38.779
which is a list of keyword arguments or dictionary keyword arguments.

00:04:38.779 --> 00:04:42.469
I'm going to ask it to print out ds.

00:04:42.470 --> 00:04:46.010
Okay? That's all there is to it.

00:04:46.009 --> 00:04:49.914
So, now, I have access to the date stamp.

00:04:49.915 --> 00:04:53.129
I can add another one here too for execution date while in here.

00:04:53.129 --> 00:04:54.750
So, I copied that line.

00:04:54.750 --> 00:04:58.605
I'm going to update this and say, execution_date.

00:04:58.605 --> 00:05:01.814
Just make sure I got that right, execution_date.

00:05:01.814 --> 00:05:04.439
Yeah. Then, I'm going to go back to Airflow.

00:05:04.439 --> 00:05:06.790
So, I'm going to close this tab,

00:05:06.790 --> 00:05:11.395
make sure I say my code. All right.

00:05:11.394 --> 00:05:16.859
So, he saved and then I go back to the Airflow UI.

00:05:16.860 --> 00:05:21.465
I'm going to turn on lesson1.demo5 and see what happens.

00:05:21.464 --> 00:05:26.039
So, let's refresh. So, we have a task in the queued state,

00:05:26.040 --> 00:05:27.480
so that hasn't started running yet.

00:05:27.480 --> 00:05:29.600
Just a reminder while we're waiting here,

00:05:29.600 --> 00:05:31.705
workers pickup tasks from the queue.

00:05:31.704 --> 00:05:35.389
So, the scheduler has placed this task into the queue,

00:05:35.389 --> 00:05:37.310
but the worker hadn't yet picked it up to run.

00:05:37.310 --> 00:05:40.100
We can see that our DAG is in the running state.

00:05:40.100 --> 00:05:42.095
Going to go ahead and refresh,

00:05:42.095 --> 00:05:44.900
and our task has already completed.

00:05:44.899 --> 00:05:49.019
So, we're going to go ahead and go into demo5.

00:05:49.019 --> 00:05:52.004
I'm going to click on the log_details task,

00:05:52.004 --> 00:05:54.600
and then we're going to check the logs.

00:05:54.600 --> 00:05:57.840
Scroll down and we can see that it

00:05:57.839 --> 00:06:00.739
printed it's execution date twice in different formats.

00:06:00.740 --> 00:06:02.235
This is the ds format,

00:06:02.235 --> 00:06:04.365
where it just gives us the year, month, and day,

00:06:04.365 --> 00:06:07.595
and this is is the datetime format execution date,

00:06:07.595 --> 00:06:12.320
2019-02-05, and then no hours,

00:06:12.319 --> 00:06:14.379
minutes, seconds, or micro seconds.

