WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.370
So, we're going to do one more demo.

00:00:02.370 --> 00:00:06.193
For this demo, we're going to be taking a look at basically

00:00:06.193 --> 00:00:10.650
how we can use Airflow tasks and features to test data quality with inner jags.

00:00:10.650 --> 00:00:14.505
First, we're going to set an SLA on our bike share traffic calculation operator.

00:00:14.505 --> 00:00:18.390
Then, we're going to add a data verification step after a load step from S3 Redshift.

00:00:18.390 --> 00:00:19.800
Finally, we're going to add

00:00:19.800 --> 00:00:24.269
a data verification step after we've calculated our output table.

00:00:24.269 --> 00:00:27.105
So, we've got our dags off.

00:00:27.105 --> 00:00:30.719
We're going to be turning on lesson two demo four in just a moment.

00:00:30.719 --> 00:00:33.795
So, we're going to return to our demos.

00:00:33.795 --> 00:00:37.510
We're going to open up demo four,

00:00:37.670 --> 00:00:42.240
and then we're going to take a look through our code to see what's different here.

00:00:42.240 --> 00:00:44.329
We can see we have a new function.

00:00:44.329 --> 00:00:46.159
Check greater than zero.

00:00:46.159 --> 00:00:48.454
This function isn't complete yet.

00:00:48.454 --> 00:00:50.089
All we've done so far,

00:00:50.090 --> 00:00:53.620
is we've actually selected account from a table.

00:00:53.619 --> 00:00:57.079
That table comes in as a keyword argument.

00:00:57.079 --> 00:00:59.809
So, we know we're going to need to provide context

00:00:59.810 --> 00:01:03.800
to our Python operator that's actually running this data quality check.

00:01:03.799 --> 00:01:09.530
So, let's go take a look at the operator that's actually going to run the check.

00:01:09.530 --> 00:01:13.715
The first thing we have here is this check trips data Python operator.

00:01:13.715 --> 00:01:16.534
We can see it's already partially configured.

00:01:16.534 --> 00:01:21.129
It provides context, it calls the check greater than zero function,

00:01:21.129 --> 00:01:25.129
and we've provided the perimeter the table name as trips.

00:01:25.129 --> 00:01:29.015
So again, table name is trips and we're checking the trips table.

00:01:29.015 --> 00:01:32.239
So, if I go back up, we can see that that parameter

00:01:32.239 --> 00:01:36.280
is being pulled in off of the keyword arguments here.

00:01:36.280 --> 00:01:40.700
So, we're going to get the table name to check from those keyword arguments.

00:01:40.700 --> 00:01:44.450
Likewise, we're going to check the stations data in a similar fashion.

00:01:44.450 --> 00:01:46.939
So, this is another new operator.

00:01:46.939 --> 00:01:49.344
So here, we provided context,

00:01:49.344 --> 00:01:54.965
and here we've given the name of the table as Stations. As you can see.

00:01:54.965 --> 00:02:01.000
Final thing we need to do, is actually add these checks into our dag.

00:02:01.000 --> 00:02:05.489
So, we're going to say after we've copied trips data,

00:02:05.709 --> 00:02:11.280
we need to actually run the check trips task.

00:02:11.740 --> 00:02:15.550
Sorry on line 72 it's actually check trips.

00:02:15.550 --> 00:02:18.400
So, we're going to do check trips,

00:02:19.280 --> 00:02:23.884
and then after we've done copy stations task,

00:02:23.884 --> 00:02:28.074
we're going to run the check stations task.

00:02:28.074 --> 00:02:31.039
However, our task isn't totally complete yet.

00:02:31.039 --> 00:02:33.078
If we go back up to this function,

00:02:33.079 --> 00:02:34.655
is not actually doing anything.

00:02:34.655 --> 00:02:39.560
All it's doing is executing this function select a count of records from a table,

00:02:39.560 --> 00:02:41.870
and then logging if it succeeded or not.

00:02:41.870 --> 00:02:44.164
Well, we need to add some checks here.

00:02:44.164 --> 00:02:49.019
So first, we need to make sure that records exist.

00:02:50.979 --> 00:02:56.329
We also need to see that since records is going to be an array,

00:02:56.330 --> 00:03:00.400
that we actually receive some rows to look at.

00:03:01.580 --> 00:03:07.445
So, actually this should be if records is none or record zero.

00:03:07.444 --> 00:03:13.539
The length of record zero is less than one.

00:03:13.539 --> 00:03:18.060
Then, we're going to raise a value error.

00:03:18.729 --> 00:03:26.489
Because no records present and destination table,

00:03:28.460 --> 00:03:30.890
and this is going to be a format string.

00:03:30.889 --> 00:03:33.859
So, we're going to raise an error because we want this task to fail.

00:03:33.860 --> 00:03:34.970
If our check fails,

00:03:34.969 --> 00:03:40.370
we want to raise a value error to denote the fact that the value is incorrect and wrong.

00:03:40.370 --> 00:03:43.379
We're also going to log an error,

00:03:44.530 --> 00:03:48.599
and we'll log more or less the same thing.

00:03:52.490 --> 00:03:56.169
Essentially, we just want to say no markers are present,

00:03:56.169 --> 00:03:57.880
and we want to make sure that's obvious so that in

00:03:57.879 --> 00:04:00.310
the airflow logs we can see that something happened.

00:04:00.310 --> 00:04:02.140
We're going to save our dag,

00:04:02.139 --> 00:04:06.309
and then we're going to return to the dag menu and run this again.

00:04:06.310 --> 00:04:10.030
Before we do that, I just want to show how to actually add an SLA.

00:04:10.030 --> 00:04:14.650
SLA can be added to tasks and you do that by providing a time delta.

00:04:14.650 --> 00:04:18.189
So, we have this Postgres operator here that creates the trips table.

00:04:18.189 --> 00:04:20.574
This is pretty fast, so we're not going to look at this one.

00:04:20.574 --> 00:04:22.569
We're going to look at the copy trips task.

00:04:22.569 --> 00:04:24.120
This one can take a little while.

00:04:24.120 --> 00:04:25.439
There could be a lot of data.

00:04:25.439 --> 00:04:33.290
So, we want to set an SLA equal to a time delta for some amount of time.

00:04:33.290 --> 00:04:34.735
So, in this case,

00:04:34.735 --> 00:04:36.319
I don't have anything specific in mind,

00:04:36.319 --> 00:04:39.064
but we could say let's say we wanted to complete within an hour.

00:04:39.064 --> 00:04:40.879
Say hour is equal one.

00:04:40.879 --> 00:04:42.629
If it needs to complete within a minute,

00:04:42.629 --> 00:04:44.329
you could say minutes equal one,

00:04:44.329 --> 00:04:49.990
or seconds equals 30 whatever the appropriate SLA is for your given task.

00:04:49.990 --> 00:04:51.935
So, we've saved this.

00:04:51.935 --> 00:04:55.865
We can go back to lesson two demo for in the UI.

00:04:55.865 --> 00:04:59.389
We're going to look at the code. We want to make sure that it was parsed correctly.

00:04:59.389 --> 00:05:02.675
So, we can see that our checks are now present,

00:05:02.675 --> 00:05:06.814
and if we scroll down, we can see your copy trips task has an SLA.

00:05:06.814 --> 00:05:11.149
So, I can return to our menu here and turn on and it's

00:05:11.149 --> 00:05:15.469
still set to run monthly. All right.

00:05:15.470 --> 00:05:20.005
So, jump into our graph view and we can see it's getting underway.

00:05:20.004 --> 00:05:25.735
So, we're running our create trips tables and stations table. Those have run.

00:05:25.735 --> 00:05:28.000
Now, we're going to start running the load trips and

00:05:28.000 --> 00:05:30.625
load stations table which we've already seen before.

00:05:30.625 --> 00:05:33.415
There was a completed. Now, we're actually going to run

00:05:33.415 --> 00:05:36.340
our checks to make sure that data is present in those tables.

00:05:36.339 --> 00:05:42.549
So, they're running, and they both completing successfully.

00:05:42.550 --> 00:05:45.470
So, let's take a look at the logs and see what they got printed up.

00:05:45.470 --> 00:05:48.940
So again, I clicked on a task and the graph view,

00:05:48.939 --> 00:05:54.504
and then I'm going to click on view log to actually view log's going to scroll down.

00:05:54.504 --> 00:05:57.279
We can see our log statement here.

00:05:57.279 --> 00:06:05.334
Data quality on table trips check passed with nine million records,

00:06:05.334 --> 00:06:06.964
almost 10 million records.

00:06:06.964 --> 00:06:09.769
So, we can see that our data quality check passed.

00:06:09.769 --> 00:06:13.964
If I went and deleted all the data from that table right now and re-run this task,

00:06:13.964 --> 00:06:17.369
it would fail because there would be zero records present.

