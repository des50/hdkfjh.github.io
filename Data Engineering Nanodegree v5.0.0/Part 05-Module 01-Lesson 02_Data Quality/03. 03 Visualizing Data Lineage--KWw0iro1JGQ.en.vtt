WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.060
Tracking data lineage in Airflow is simple.

00:00:03.060 --> 00:00:05.099
As we've already seen in lesson one,

00:00:05.099 --> 00:00:09.434
the Airflow UI parses our DAGs and surfaces a visualization of the graph.

00:00:09.435 --> 00:00:10.725
So, as we've already covered,

00:00:10.724 --> 00:00:15.554
we have create_table, load_from_S3_to_redshift,and then calculate_location_traffic.

00:00:15.554 --> 00:00:19.800
Airflow keeps track of all runs of a particular DAG as tasks.

00:00:19.800 --> 00:00:23.475
So again, we have our exercise six DAG down here,

00:00:23.475 --> 00:00:28.725
and we have runs for each one each time that we've executed our DAG.

00:00:28.725 --> 00:00:31.020
So, you can see here the dark green indicates

00:00:31.019 --> 00:00:33.390
that the run is complete and that the task is complete.

00:00:33.390 --> 00:00:37.740
So, the runs complete here in the circle and the square says the task is complete.

00:00:37.740 --> 00:00:42.150
Airflow also shows us the rendered code for each task.

00:00:42.149 --> 00:00:43.994
One thing to keep in mind,

00:00:43.994 --> 00:00:46.549
Airflow keeps a record of historical DAGs and

00:00:46.549 --> 00:00:51.574
task executions but it does not store the data from those historical runs.

00:00:51.575 --> 00:00:54.125
Whatever the latest code is in your DAG definition

00:00:54.125 --> 00:00:56.814
is what Airflow will render for you in the browser.

00:00:56.814 --> 00:01:01.024
So, be careful in making assumptions about what was run historically.

00:01:01.024 --> 00:01:03.679
So again, just to emphasize this,

00:01:03.679 --> 00:01:07.260
if I went in and change the SQL on the slide, say,

00:01:07.260 --> 00:01:10.010
I want to change the table name from station traffic to

00:01:10.010 --> 00:01:14.105
just traffic or station traffic 2018.

00:01:14.105 --> 00:01:17.329
If I did that and I updated my DAG,

00:01:17.329 --> 00:01:20.480
Airflow is going to pick up that change and it's

00:01:20.480 --> 00:01:23.180
going to render that for all historical DAG runs.

00:01:23.180 --> 00:01:26.720
So, it's really important to understand that as you modify

00:01:26.719 --> 00:01:31.280
DAGs that the code for historical runs will look different as well when you pull them up.

00:01:31.280 --> 00:01:34.564
So, it does not keep a record of those historical code changes.

00:01:34.564 --> 00:01:38.194
If you're going to make major changes to an existing DAG, say,

00:01:38.194 --> 00:01:41.224
I wanted to completely change the analysis in this example,

00:01:41.224 --> 00:01:43.774
it would be better to make an entirely new DAG

00:01:43.775 --> 00:01:46.300
and turn this DAG off or give in an end date.

00:01:46.299 --> 00:01:49.534
You should wait these decisions carefully with your team when they come up.

00:01:49.534 --> 00:01:52.849
We're going to talk more about end dates very shortly.

00:01:52.849 --> 00:01:55.879
Another nice thing about Airflow is that it's

00:01:55.879 --> 00:01:59.569
a single visual point of reference for everyone on your team,

00:01:59.569 --> 00:02:01.539
no matter how technical they are.

00:02:01.540 --> 00:02:04.625
You can provide your data consumers access to the web UI,

00:02:04.625 --> 00:02:07.745
so that they can open up View DAGs and their history.

00:02:07.745 --> 00:02:12.169
Giving your data consumers the ability to view data lineage and your data pipelines,

00:02:12.169 --> 00:02:15.360
goes a long way towards building trust in your data pipelines.

