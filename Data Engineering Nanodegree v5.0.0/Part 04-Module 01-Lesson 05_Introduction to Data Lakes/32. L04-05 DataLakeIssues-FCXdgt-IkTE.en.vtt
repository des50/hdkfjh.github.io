WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.139
Finally, we talk about some issues that might face us shall we

00:00:04.139 --> 00:00:08.875
decide to pursue a data lake solution.

00:00:08.875 --> 00:00:12.029
So the data lake is prone to being

00:00:12.029 --> 00:00:16.949
chaotic and sometimes they call it being prone to being

00:00:16.949 --> 00:00:21.480
a garbage dump that everyone puts everything inside without knowing

00:00:21.480 --> 00:00:27.045
actually how to use it and then one gets lost and no one knows even what's inside.

00:00:27.045 --> 00:00:32.939
So that would be the extreme case of abusing this thing of all data is welcomed.

00:00:32.939 --> 00:00:37.379
There has been some efforts into putting measures and practices as for instance,

00:00:37.380 --> 00:00:42.260
like the tape metadata as you have to document everything that goes in and how to

00:00:42.259 --> 00:00:47.929
document it and the lifecycle of this data and so forth.

00:00:47.929 --> 00:00:51.575
But it's still not

00:00:51.575 --> 00:00:57.580
as a mastered art as it is the case for example in how to manage a data warehouse.

00:00:57.579 --> 00:01:01.729
Also, since a major feature of the data lake is basically everything

00:01:01.729 --> 00:01:06.700
is open or desirably,

00:01:06.700 --> 00:01:09.680
it's encouraged that you want to make people join

00:01:09.680 --> 00:01:13.325
datasets and see that like a complete picture.

00:01:13.325 --> 00:01:17.450
Sometimes, you have problems with data governance that

00:01:17.450 --> 00:01:23.090
you're either too close than enclosing everything, becoming restrictive,

00:01:23.090 --> 00:01:28.280
or opening everything wide and seeing who has access to what,

00:01:28.280 --> 00:01:33.364
deciding that might be a bit hard in a data lake.

00:01:33.364 --> 00:01:39.649
Finally, should the data lake totally replace the data warehouse?

00:01:39.650 --> 00:01:41.000
Should they work together?

00:01:41.000 --> 00:01:46.370
Or should be used for originally like the initial case of offloading?

00:01:46.370 --> 00:01:50.454
I guess the thing is that based on the case at hand,

00:01:50.454 --> 00:01:53.219
one can decide that.

00:01:53.219 --> 00:01:56.894
However, I think in most cases now the general verdict

00:01:56.894 --> 00:02:00.539
is while you're going to have a data lake and the data warehouse,

00:02:00.540 --> 00:02:04.440
however, you're going to have a smaller data warehouse.

00:02:04.439 --> 00:02:07.429
You don't like get the totally of the data warehouse,

00:02:07.430 --> 00:02:11.659
but lots of other things that could be done without a warehouse,

00:02:11.659 --> 00:02:13.745
you can do them on data lake.

00:02:13.745 --> 00:02:17.450
That said, even if you only have a data lake,

00:02:17.449 --> 00:02:21.514
dimensional modeling is a very nice part for

00:02:21.514 --> 00:02:25.299
the type of data where dimensional modeling is suited for.

00:02:25.300 --> 00:02:29.180
If you still want to produce those business reports even if you have data lake,

00:02:29.180 --> 00:02:30.530
nothing prevents you from doing

00:02:30.530 --> 00:02:35.794
those dimensional ordering practices with the star schemas and OLAP cubes,

00:02:35.794 --> 00:02:42.989
and that should still give you the same nice outcome and high value.

