WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.040
Now, we go back to Athena where it all started and actually it might not be loaded,

00:00:06.040 --> 00:00:09.265
so we need to refresh,

00:00:09.265 --> 00:00:11.725
okay, and we open,

00:00:11.724 --> 00:00:14.379
oh, here is our new database.

00:00:14.380 --> 00:00:17.820
Fantastic. Actually, accidentally here,

00:00:17.820 --> 00:00:25.359
I have this ds-store file created from my MacBook,

00:00:25.359 --> 00:00:29.059
I guess I can just delete the table.

00:00:29.070 --> 00:00:31.530
But it takes a while to refresh.

00:00:31.530 --> 00:00:36.130
Anyhow, I'm going to continue here with the proper tables,

00:00:36.289 --> 00:00:39.429
actually you see the payments here.

00:00:39.429 --> 00:00:42.829
If I click here and I say preview table,

00:00:42.829 --> 00:00:47.250
oh, here's the table and the data was important.

00:00:47.250 --> 00:00:52.704
Just try to actually recall what we just did.

00:00:52.704 --> 00:00:54.204
The only thing we did,

00:00:54.204 --> 00:00:57.109
is that we have data in S3.

00:00:57.109 --> 00:00:59.670
We went here, and said create table,

00:00:59.670 --> 00:01:02.935
we went to the AWS glue crawler.

00:01:02.935 --> 00:01:05.170
We pointed the crawler to

00:01:05.170 --> 00:01:14.019
our folder that has all the tables as CSVs and we just waited one minute.

00:01:14.019 --> 00:01:16.314
Then, we have a database that we can query.

00:01:16.314 --> 00:01:18.670
It's a schema on read at its finest.

00:01:18.670 --> 00:01:22.250
We don't even have to create an EMR cluster tool.

00:01:22.250 --> 00:01:25.049
Actually, here I prepared,

00:01:25.049 --> 00:01:30.219
if you remember from lesson one about data warehousing,

00:01:30.219 --> 00:01:32.390
here is our normal q.

00:01:32.390 --> 00:01:34.685
Here is just that,

00:01:34.685 --> 00:01:37.219
I will, instead of costing,

00:01:37.218 --> 00:01:38.994
that will not be very easy here.

00:01:38.995 --> 00:01:43.910
So I'm going to date parse the payment date because it's a string here,

00:01:43.909 --> 00:01:49.239
and the date parsing with actually converted for me as a timestamp.

00:01:49.239 --> 00:01:54.829
Then, I'm going to get the month exactly using the month's function here.

00:01:54.829 --> 00:01:59.159
Then, this actually does the cube for us.

00:02:00.909 --> 00:02:05.564
The semantics of the SQL are somewhat different.

00:02:05.564 --> 00:02:08.280
So actually, I have to take,

00:02:08.280 --> 00:02:11.349
like this is a new table here.

00:02:11.770 --> 00:02:16.860
Then, we have select from and group by and order by,

00:02:16.860 --> 00:02:22.685
just because you cannot do as months and group by here in Athena.

00:02:22.685 --> 00:02:25.909
But actually, it works in Spark, but not here in Athena.

00:02:25.909 --> 00:02:27.844
So that's a minor SQL difference.

00:02:27.844 --> 00:02:33.560
So I did it as select from a select statement.

00:02:33.560 --> 00:02:38.629
We run this query and we get our OLAP cube here.

00:02:38.629 --> 00:02:41.539
Here's the fact and here are the dimensions.

00:02:41.539 --> 00:02:44.569
You can also do select into and create

00:02:44.569 --> 00:02:49.219
all your facts and dimensions table with a star schema.

