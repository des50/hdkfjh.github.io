WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.475
We need to convert these into columns.

00:00:02.475 --> 00:00:03.870
How do I do that?

00:00:03.870 --> 00:00:07.275
So, I'm going to use here select expression.

00:00:07.275 --> 00:00:10.815
I'm assuming you know the difference between select and select expression.

00:00:10.814 --> 00:00:12.240
When you do select,

00:00:12.240 --> 00:00:14.750
both expression and columns are column objects.

00:00:14.750 --> 00:00:17.629
But when you do select expressions you can write the string here.

00:00:17.629 --> 00:00:21.905
When you right the select you expect to use either the name of the column

00:00:21.905 --> 00:00:27.905
or some functions that you get from pispark.sql.functions for instance.

00:00:27.905 --> 00:00:31.820
Now, what we do is we say parsed which is

00:00:31.820 --> 00:00:36.969
a column and then since this is an appropriate expression,

00:00:36.969 --> 00:00:39.754
we can actually access the field called

00:00:39.755 --> 00:00:43.880
host and also rename the column while we're at it.

00:00:43.880 --> 00:00:47.780
We get now the hosts like that, okay?

00:00:47.780 --> 00:00:52.200
Let's get the second one which is parsed date_time like

00:00:52.200 --> 00:00:57.195
this and now here we forgot to rename,

00:00:57.195 --> 00:00:59.549
but that's fine and my point was,

00:00:59.549 --> 00:01:04.739
"Hey we're not going to sit here and write this one, right.

00:01:04.739 --> 00:01:06.449
Maybe these are 10,

00:01:06.450 --> 00:01:09.450
but maybe some sometimes you get lots of data."

00:01:09.450 --> 00:01:12.665
So, what I would do instead is to get the list of columns and

00:01:12.665 --> 00:01:17.015
the nice names that they want to have and I'm going to do list comprehensions.

00:01:17.015 --> 00:01:20.340
This is the list of fields and I'm going to say,

00:01:20.340 --> 00:01:26.510
for field in fields I'm going to construct this which is

00:01:26.510 --> 00:01:29.750
actually the thing that I did here and this

00:01:29.750 --> 00:01:33.180
is a place holder or the field name as something.

00:01:33.180 --> 00:01:35.930
So, that becomes an expression.

00:01:36.590 --> 00:01:40.400
This is the list of expressions as strings and here I'm

00:01:40.400 --> 00:01:43.580
going to use a cool functions of Python.

00:01:43.579 --> 00:01:47.539
I don't know if you had the encounter before which

00:01:47.540 --> 00:01:51.530
is actually I say star EXPRS and what this does,

00:01:51.530 --> 00:01:53.465
this looks like one argument,

00:01:53.465 --> 00:01:57.950
but the star EXPRS is when you have a list here it

00:01:57.950 --> 00:02:02.135
actually kinds of deflates all of

00:02:02.135 --> 00:02:07.040
those and puts them like flattens this list and pass it as many arguments.

00:02:07.040 --> 00:02:11.450
So, this is as if I called select expressions with

00:02:11.449 --> 00:02:17.214
10 arguments like here look that would do it, okay?

00:02:17.215 --> 00:02:21.659
DfClean and I am going to call this here.

00:02:21.659 --> 00:02:26.289
Now, I got my columns That was very cool.

00:02:26.289 --> 00:02:29.840
Now, I go and try to see the popular hosts.

00:02:29.840 --> 00:02:34.670
I do dfClean group by host count order by this count.

00:02:34.669 --> 00:02:40.009
I guess you know from the past exercise you can do this in SQL also, looks okay.

00:02:40.009 --> 00:02:46.669
Those guys from prodigy.com are particularly interested in visiting NASA.

00:02:46.669 --> 00:02:49.789
Then popular content.

00:02:49.789 --> 00:02:53.479
I get the end points like the URL like this which was requested

00:02:53.479 --> 00:02:56.679
most by count and that looks correct.

